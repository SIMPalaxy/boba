// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 ".\Parser.fsy"




# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PATTERN
  | RECURSIVE
  | DATA
  | MAIN
  | EXPORT
  | AS
  | IMPORT
  | EQUALS
  | ELLIPSIS
  | DOT
  | PLUS
  | DOUBLE_COLON
  | COLON
  | R_BRACKET
  | L_BRACKET
  | R_BRACE
  | L_BRACE
  | R_PAREN
  | L_PAREN
  | R_ANGLE
  | L_ANGLE
  | DECIMAL of (string)
  | INTEGER of (string)
  | PROPERTY_NAME of (string)
  | PREDICATE_NAME of (string)
  | OPERATOR_NAME of (string)
  | BIG_NAME of (string)
  | SMALL_NAME of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PATTERN
    | TOKEN_RECURSIVE
    | TOKEN_DATA
    | TOKEN_MAIN
    | TOKEN_EXPORT
    | TOKEN_AS
    | TOKEN_IMPORT
    | TOKEN_EQUALS
    | TOKEN_ELLIPSIS
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_DOUBLE_COLON
    | TOKEN_COLON
    | TOKEN_R_BRACKET
    | TOKEN_L_BRACKET
    | TOKEN_R_BRACE
    | TOKEN_L_BRACE
    | TOKEN_R_PAREN
    | TOKEN_L_PAREN
    | TOKEN_R_ANGLE
    | TOKEN_L_ANGLE
    | TOKEN_DECIMAL
    | TOKEN_INTEGER
    | TOKEN_PROPERTY_NAME
    | TOKEN_PREDICATE_NAME
    | TOKEN_OPERATOR_NAME
    | TOKEN_BIG_NAME
    | TOKEN_SMALL_NAME
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startunit
    | NONTERM_unit

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PATTERN  -> 0 
  | RECURSIVE  -> 1 
  | DATA  -> 2 
  | MAIN  -> 3 
  | EXPORT  -> 4 
  | AS  -> 5 
  | IMPORT  -> 6 
  | EQUALS  -> 7 
  | ELLIPSIS  -> 8 
  | DOT  -> 9 
  | PLUS  -> 10 
  | DOUBLE_COLON  -> 11 
  | COLON  -> 12 
  | R_BRACKET  -> 13 
  | L_BRACKET  -> 14 
  | R_BRACE  -> 15 
  | L_BRACE  -> 16 
  | R_PAREN  -> 17 
  | L_PAREN  -> 18 
  | R_ANGLE  -> 19 
  | L_ANGLE  -> 20 
  | DECIMAL _ -> 21 
  | INTEGER _ -> 22 
  | PROPERTY_NAME _ -> 23 
  | PREDICATE_NAME _ -> 24 
  | OPERATOR_NAME _ -> 25 
  | BIG_NAME _ -> 26 
  | SMALL_NAME _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PATTERN 
  | 1 -> TOKEN_RECURSIVE 
  | 2 -> TOKEN_DATA 
  | 3 -> TOKEN_MAIN 
  | 4 -> TOKEN_EXPORT 
  | 5 -> TOKEN_AS 
  | 6 -> TOKEN_IMPORT 
  | 7 -> TOKEN_EQUALS 
  | 8 -> TOKEN_ELLIPSIS 
  | 9 -> TOKEN_DOT 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_DOUBLE_COLON 
  | 12 -> TOKEN_COLON 
  | 13 -> TOKEN_R_BRACKET 
  | 14 -> TOKEN_L_BRACKET 
  | 15 -> TOKEN_R_BRACE 
  | 16 -> TOKEN_L_BRACE 
  | 17 -> TOKEN_R_PAREN 
  | 18 -> TOKEN_L_PAREN 
  | 19 -> TOKEN_R_ANGLE 
  | 20 -> TOKEN_L_ANGLE 
  | 21 -> TOKEN_DECIMAL 
  | 22 -> TOKEN_INTEGER 
  | 23 -> TOKEN_PROPERTY_NAME 
  | 24 -> TOKEN_PREDICATE_NAME 
  | 25 -> TOKEN_OPERATOR_NAME 
  | 26 -> TOKEN_BIG_NAME 
  | 27 -> TOKEN_SMALL_NAME 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startunit 
    | 1 -> NONTERM_unit 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PATTERN  -> "PATTERN" 
  | RECURSIVE  -> "RECURSIVE" 
  | DATA  -> "DATA" 
  | MAIN  -> "MAIN" 
  | EXPORT  -> "EXPORT" 
  | AS  -> "AS" 
  | IMPORT  -> "IMPORT" 
  | EQUALS  -> "EQUALS" 
  | ELLIPSIS  -> "ELLIPSIS" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | DOUBLE_COLON  -> "DOUBLE_COLON" 
  | COLON  -> "COLON" 
  | R_BRACKET  -> "R_BRACKET" 
  | L_BRACKET  -> "L_BRACKET" 
  | R_BRACE  -> "R_BRACE" 
  | L_BRACE  -> "L_BRACE" 
  | R_PAREN  -> "R_PAREN" 
  | L_PAREN  -> "L_PAREN" 
  | R_ANGLE  -> "R_ANGLE" 
  | L_ANGLE  -> "L_ANGLE" 
  | DECIMAL _ -> "DECIMAL" 
  | INTEGER _ -> "INTEGER" 
  | PROPERTY_NAME _ -> "PROPERTY_NAME" 
  | PREDICATE_NAME _ -> "PREDICATE_NAME" 
  | OPERATOR_NAME _ -> "OPERATOR_NAME" 
  | BIG_NAME _ -> "BIG_NAME" 
  | SMALL_NAME _ -> "SMALL_NAME" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PATTERN  -> (null : System.Object) 
  | RECURSIVE  -> (null : System.Object) 
  | DATA  -> (null : System.Object) 
  | MAIN  -> (null : System.Object) 
  | EXPORT  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | ELLIPSIS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | DOUBLE_COLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | R_BRACKET  -> (null : System.Object) 
  | L_BRACKET  -> (null : System.Object) 
  | R_BRACE  -> (null : System.Object) 
  | L_BRACE  -> (null : System.Object) 
  | R_PAREN  -> (null : System.Object) 
  | L_PAREN  -> (null : System.Object) 
  | R_ANGLE  -> (null : System.Object) 
  | L_ANGLE  -> (null : System.Object) 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PROPERTY_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PREDICATE_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPERATOR_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIG_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SMALL_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; |]
let _fsyacc_action_rows = 3
let _fsyacc_actionTableElements = [|1us; 32768us; 6us; 2us; 0us; 49152us; 0us; 16385us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; |]
let _fsyacc_reductions ()  =    [| 
# 230 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  int  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startunit));
# 239 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 ".\Parser.fsy"
                                    1 
                   )
# 45 ".\Parser.fsy"
                 :  int ));
|]
# 250 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let unit lexer lexbuf :  int  =
    engine lexer lexbuf 0 :?> _
