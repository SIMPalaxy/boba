// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 ".\Parser.fsy"


open Boba.Compiler.Syntax
open Boba.Core.DotSeq


# 13 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IF
  | WHEN
  | WHILE
  | THEN
  | ELSE
  | DO
  | MATCH
  | WITH
  | AFTER
  | HANDLE
  | UNTAG
  | PUT_REF
  | GET_REF
  | NEW_REF
  | WITH_STATE
  | FUNCTION
  | LOCAL
  | LET
  | PATTERN
  | RECURSIVE
  | DATA
  | MAIN
  | EXPORT
  | AS
  | IMPORT
  | EQUALS
  | ELLIPSIS
  | BAR
  | DOUBLE_BAR
  | DOT
  | PLUS
  | MINUS
  | COLON
  | DOUBLE_COLON
  | SEMICOLON
  | L_BIND
  | R_BIND
  | L_ARROW
  | R_ARROW
  | L_BRACKET
  | R_BRACKET
  | L_BRACE
  | R_BRACE
  | L_PAREN
  | R_PAREN
  | L_ANGLE
  | R_ANGLE
  | STRING of (StringLiteral)
  | DECIMAL of (DecimalLiteral)
  | INTEGER of (IntegerLiteral)
  | PREDICATE_NAME of (Name)
  | OPERATOR_NAME of (Name)
  | BIG_NAME of (Name)
  | SMALL_NAME of (Name)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IF
    | TOKEN_WHEN
    | TOKEN_WHILE
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_DO
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_AFTER
    | TOKEN_HANDLE
    | TOKEN_UNTAG
    | TOKEN_PUT_REF
    | TOKEN_GET_REF
    | TOKEN_NEW_REF
    | TOKEN_WITH_STATE
    | TOKEN_FUNCTION
    | TOKEN_LOCAL
    | TOKEN_LET
    | TOKEN_PATTERN
    | TOKEN_RECURSIVE
    | TOKEN_DATA
    | TOKEN_MAIN
    | TOKEN_EXPORT
    | TOKEN_AS
    | TOKEN_IMPORT
    | TOKEN_EQUALS
    | TOKEN_ELLIPSIS
    | TOKEN_BAR
    | TOKEN_DOUBLE_BAR
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_COLON
    | TOKEN_DOUBLE_COLON
    | TOKEN_SEMICOLON
    | TOKEN_L_BIND
    | TOKEN_R_BIND
    | TOKEN_L_ARROW
    | TOKEN_R_ARROW
    | TOKEN_L_BRACKET
    | TOKEN_R_BRACKET
    | TOKEN_L_BRACE
    | TOKEN_R_BRACE
    | TOKEN_L_PAREN
    | TOKEN_R_PAREN
    | TOKEN_L_ANGLE
    | TOKEN_R_ANGLE
    | TOKEN_STRING
    | TOKEN_DECIMAL
    | TOKEN_INTEGER
    | TOKEN_PREDICATE_NAME
    | TOKEN_OPERATOR_NAME
    | TOKEN_BIG_NAME
    | TOKEN_SMALL_NAME
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startunit
    | NONTERM_unit
    | NONTERM_import_list
    | NONTERM_decl_list
    | NONTERM_main
    | NONTERM_import
    | NONTERM_import_path
    | NONTERM_remote
    | NONTERM_export
    | NONTERM_brace_names
    | NONTERM_name_list
    | NONTERM_name
    | NONTERM_declaration
    | NONTERM_term_statement_block
    | NONTERM_term_statement_list
    | NONTERM_term_statement
    | NONTERM_local_function_list
    | NONTERM_local_function
    | NONTERM_simple_expr
    | NONTERM_word
    | NONTERM_handle_word
    | NONTERM_handler
    | NONTERM_return
    | NONTERM_param_list
    | NONTERM_handler_list
    | NONTERM_match_word
    | NONTERM_match_clause_list
    | NONTERM_match_clause
    | NONTERM_if_word
    | NONTERM_when_word
    | NONTERM_while_word
    | NONTERM_function_literal
    | NONTERM_identifier
    | NONTERM_qualified_name
    | NONTERM_pattern_expr_list
    | NONTERM_pattern_expr
    | NONTERM_fixed_size_term_expr
    | NONTERM_fixed_size_term_factor_list
    | NONTERM_fixed_size_term_factor

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IF  -> 0 
  | WHEN  -> 1 
  | WHILE  -> 2 
  | THEN  -> 3 
  | ELSE  -> 4 
  | DO  -> 5 
  | MATCH  -> 6 
  | WITH  -> 7 
  | AFTER  -> 8 
  | HANDLE  -> 9 
  | UNTAG  -> 10 
  | PUT_REF  -> 11 
  | GET_REF  -> 12 
  | NEW_REF  -> 13 
  | WITH_STATE  -> 14 
  | FUNCTION  -> 15 
  | LOCAL  -> 16 
  | LET  -> 17 
  | PATTERN  -> 18 
  | RECURSIVE  -> 19 
  | DATA  -> 20 
  | MAIN  -> 21 
  | EXPORT  -> 22 
  | AS  -> 23 
  | IMPORT  -> 24 
  | EQUALS  -> 25 
  | ELLIPSIS  -> 26 
  | BAR  -> 27 
  | DOUBLE_BAR  -> 28 
  | DOT  -> 29 
  | PLUS  -> 30 
  | MINUS  -> 31 
  | COLON  -> 32 
  | DOUBLE_COLON  -> 33 
  | SEMICOLON  -> 34 
  | L_BIND  -> 35 
  | R_BIND  -> 36 
  | L_ARROW  -> 37 
  | R_ARROW  -> 38 
  | L_BRACKET  -> 39 
  | R_BRACKET  -> 40 
  | L_BRACE  -> 41 
  | R_BRACE  -> 42 
  | L_PAREN  -> 43 
  | R_PAREN  -> 44 
  | L_ANGLE  -> 45 
  | R_ANGLE  -> 46 
  | STRING _ -> 47 
  | DECIMAL _ -> 48 
  | INTEGER _ -> 49 
  | PREDICATE_NAME _ -> 50 
  | OPERATOR_NAME _ -> 51 
  | BIG_NAME _ -> 52 
  | SMALL_NAME _ -> 53 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IF 
  | 1 -> TOKEN_WHEN 
  | 2 -> TOKEN_WHILE 
  | 3 -> TOKEN_THEN 
  | 4 -> TOKEN_ELSE 
  | 5 -> TOKEN_DO 
  | 6 -> TOKEN_MATCH 
  | 7 -> TOKEN_WITH 
  | 8 -> TOKEN_AFTER 
  | 9 -> TOKEN_HANDLE 
  | 10 -> TOKEN_UNTAG 
  | 11 -> TOKEN_PUT_REF 
  | 12 -> TOKEN_GET_REF 
  | 13 -> TOKEN_NEW_REF 
  | 14 -> TOKEN_WITH_STATE 
  | 15 -> TOKEN_FUNCTION 
  | 16 -> TOKEN_LOCAL 
  | 17 -> TOKEN_LET 
  | 18 -> TOKEN_PATTERN 
  | 19 -> TOKEN_RECURSIVE 
  | 20 -> TOKEN_DATA 
  | 21 -> TOKEN_MAIN 
  | 22 -> TOKEN_EXPORT 
  | 23 -> TOKEN_AS 
  | 24 -> TOKEN_IMPORT 
  | 25 -> TOKEN_EQUALS 
  | 26 -> TOKEN_ELLIPSIS 
  | 27 -> TOKEN_BAR 
  | 28 -> TOKEN_DOUBLE_BAR 
  | 29 -> TOKEN_DOT 
  | 30 -> TOKEN_PLUS 
  | 31 -> TOKEN_MINUS 
  | 32 -> TOKEN_COLON 
  | 33 -> TOKEN_DOUBLE_COLON 
  | 34 -> TOKEN_SEMICOLON 
  | 35 -> TOKEN_L_BIND 
  | 36 -> TOKEN_R_BIND 
  | 37 -> TOKEN_L_ARROW 
  | 38 -> TOKEN_R_ARROW 
  | 39 -> TOKEN_L_BRACKET 
  | 40 -> TOKEN_R_BRACKET 
  | 41 -> TOKEN_L_BRACE 
  | 42 -> TOKEN_R_BRACE 
  | 43 -> TOKEN_L_PAREN 
  | 44 -> TOKEN_R_PAREN 
  | 45 -> TOKEN_L_ANGLE 
  | 46 -> TOKEN_R_ANGLE 
  | 47 -> TOKEN_STRING 
  | 48 -> TOKEN_DECIMAL 
  | 49 -> TOKEN_INTEGER 
  | 50 -> TOKEN_PREDICATE_NAME 
  | 51 -> TOKEN_OPERATOR_NAME 
  | 52 -> TOKEN_BIG_NAME 
  | 53 -> TOKEN_SMALL_NAME 
  | 56 -> TOKEN_end_of_input
  | 54 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startunit 
    | 1 -> NONTERM_unit 
    | 2 -> NONTERM_unit 
    | 3 -> NONTERM_import_list 
    | 4 -> NONTERM_import_list 
    | 5 -> NONTERM_decl_list 
    | 6 -> NONTERM_decl_list 
    | 7 -> NONTERM_main 
    | 8 -> NONTERM_import 
    | 9 -> NONTERM_import 
    | 10 -> NONTERM_import_path 
    | 11 -> NONTERM_import_path 
    | 12 -> NONTERM_remote 
    | 13 -> NONTERM_export 
    | 14 -> NONTERM_brace_names 
    | 15 -> NONTERM_name_list 
    | 16 -> NONTERM_name_list 
    | 17 -> NONTERM_name 
    | 18 -> NONTERM_name 
    | 19 -> NONTERM_name 
    | 20 -> NONTERM_declaration 
    | 21 -> NONTERM_term_statement_block 
    | 22 -> NONTERM_term_statement_list 
    | 23 -> NONTERM_term_statement_list 
    | 24 -> NONTERM_term_statement 
    | 25 -> NONTERM_term_statement 
    | 26 -> NONTERM_term_statement 
    | 27 -> NONTERM_term_statement 
    | 28 -> NONTERM_term_statement 
    | 29 -> NONTERM_local_function_list 
    | 30 -> NONTERM_local_function_list 
    | 31 -> NONTERM_local_function 
    | 32 -> NONTERM_simple_expr 
    | 33 -> NONTERM_simple_expr 
    | 34 -> NONTERM_word 
    | 35 -> NONTERM_word 
    | 36 -> NONTERM_word 
    | 37 -> NONTERM_word 
    | 38 -> NONTERM_word 
    | 39 -> NONTERM_word 
    | 40 -> NONTERM_word 
    | 41 -> NONTERM_word 
    | 42 -> NONTERM_word 
    | 43 -> NONTERM_word 
    | 44 -> NONTERM_word 
    | 45 -> NONTERM_word 
    | 46 -> NONTERM_word 
    | 47 -> NONTERM_word 
    | 48 -> NONTERM_word 
    | 49 -> NONTERM_word 
    | 50 -> NONTERM_word 
    | 51 -> NONTERM_word 
    | 52 -> NONTERM_word 
    | 53 -> NONTERM_word 
    | 54 -> NONTERM_word 
    | 55 -> NONTERM_handle_word 
    | 56 -> NONTERM_handle_word 
    | 57 -> NONTERM_handler 
    | 58 -> NONTERM_return 
    | 59 -> NONTERM_param_list 
    | 60 -> NONTERM_param_list 
    | 61 -> NONTERM_handler_list 
    | 62 -> NONTERM_handler_list 
    | 63 -> NONTERM_match_word 
    | 64 -> NONTERM_match_word 
    | 65 -> NONTERM_match_clause_list 
    | 66 -> NONTERM_match_clause_list 
    | 67 -> NONTERM_match_clause 
    | 68 -> NONTERM_if_word 
    | 69 -> NONTERM_when_word 
    | 70 -> NONTERM_while_word 
    | 71 -> NONTERM_function_literal 
    | 72 -> NONTERM_identifier 
    | 73 -> NONTERM_identifier 
    | 74 -> NONTERM_qualified_name 
    | 75 -> NONTERM_qualified_name 
    | 76 -> NONTERM_qualified_name 
    | 77 -> NONTERM_qualified_name 
    | 78 -> NONTERM_pattern_expr_list 
    | 79 -> NONTERM_pattern_expr_list 
    | 80 -> NONTERM_pattern_expr_list 
    | 81 -> NONTERM_pattern_expr 
    | 82 -> NONTERM_pattern_expr 
    | 83 -> NONTERM_pattern_expr 
    | 84 -> NONTERM_fixed_size_term_expr 
    | 85 -> NONTERM_fixed_size_term_factor_list 
    | 86 -> NONTERM_fixed_size_term_factor_list 
    | 87 -> NONTERM_fixed_size_term_factor 
    | 88 -> NONTERM_fixed_size_term_factor 
    | 89 -> NONTERM_fixed_size_term_factor 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 56 
let _fsyacc_tagOfErrorTerminal = 54

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IF  -> "IF" 
  | WHEN  -> "WHEN" 
  | WHILE  -> "WHILE" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | DO  -> "DO" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | AFTER  -> "AFTER" 
  | HANDLE  -> "HANDLE" 
  | UNTAG  -> "UNTAG" 
  | PUT_REF  -> "PUT_REF" 
  | GET_REF  -> "GET_REF" 
  | NEW_REF  -> "NEW_REF" 
  | WITH_STATE  -> "WITH_STATE" 
  | FUNCTION  -> "FUNCTION" 
  | LOCAL  -> "LOCAL" 
  | LET  -> "LET" 
  | PATTERN  -> "PATTERN" 
  | RECURSIVE  -> "RECURSIVE" 
  | DATA  -> "DATA" 
  | MAIN  -> "MAIN" 
  | EXPORT  -> "EXPORT" 
  | AS  -> "AS" 
  | IMPORT  -> "IMPORT" 
  | EQUALS  -> "EQUALS" 
  | ELLIPSIS  -> "ELLIPSIS" 
  | BAR  -> "BAR" 
  | DOUBLE_BAR  -> "DOUBLE_BAR" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | COLON  -> "COLON" 
  | DOUBLE_COLON  -> "DOUBLE_COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | L_BIND  -> "L_BIND" 
  | R_BIND  -> "R_BIND" 
  | L_ARROW  -> "L_ARROW" 
  | R_ARROW  -> "R_ARROW" 
  | L_BRACKET  -> "L_BRACKET" 
  | R_BRACKET  -> "R_BRACKET" 
  | L_BRACE  -> "L_BRACE" 
  | R_BRACE  -> "R_BRACE" 
  | L_PAREN  -> "L_PAREN" 
  | R_PAREN  -> "R_PAREN" 
  | L_ANGLE  -> "L_ANGLE" 
  | R_ANGLE  -> "R_ANGLE" 
  | STRING _ -> "STRING" 
  | DECIMAL _ -> "DECIMAL" 
  | INTEGER _ -> "INTEGER" 
  | PREDICATE_NAME _ -> "PREDICATE_NAME" 
  | OPERATOR_NAME _ -> "OPERATOR_NAME" 
  | BIG_NAME _ -> "BIG_NAME" 
  | SMALL_NAME _ -> "SMALL_NAME" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IF  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | AFTER  -> (null : System.Object) 
  | HANDLE  -> (null : System.Object) 
  | UNTAG  -> (null : System.Object) 
  | PUT_REF  -> (null : System.Object) 
  | GET_REF  -> (null : System.Object) 
  | NEW_REF  -> (null : System.Object) 
  | WITH_STATE  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | LOCAL  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | PATTERN  -> (null : System.Object) 
  | RECURSIVE  -> (null : System.Object) 
  | DATA  -> (null : System.Object) 
  | MAIN  -> (null : System.Object) 
  | EXPORT  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | ELLIPSIS  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | DOUBLE_BAR  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOUBLE_COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | L_BIND  -> (null : System.Object) 
  | R_BIND  -> (null : System.Object) 
  | L_ARROW  -> (null : System.Object) 
  | R_ARROW  -> (null : System.Object) 
  | L_BRACKET  -> (null : System.Object) 
  | R_BRACKET  -> (null : System.Object) 
  | L_BRACE  -> (null : System.Object) 
  | R_BRACE  -> (null : System.Object) 
  | L_PAREN  -> (null : System.Object) 
  | R_PAREN  -> (null : System.Object) 
  | L_ANGLE  -> (null : System.Object) 
  | R_ANGLE  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PREDICATE_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPERATOR_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIG_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SMALL_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 2us; 3us; 1us; 65535us; 3us; 4us; 1us; 65535us; 2us; 6us; 2us; 65535us; 11us; 12us; 15us; 16us; 2us; 65535us; 11us; 20us; 15us; 20us; 1us; 65535us; 3us; 5us; 2us; 65535us; 11us; 15us; 32us; 33us; 1us; 65535us; 34us; 35us; 1us; 65535us; 35us; 37us; 1us; 65535us; 3us; 7us; 18us; 65535us; 10us; 72us; 50us; 72us; 56us; 72us; 62us; 72us; 63us; 72us; 64us; 72us; 65us; 72us; 66us; 72us; 67us; 72us; 68us; 72us; 69us; 72us; 70us; 72us; 87us; 88us; 100us; 101us; 132us; 133us; 134us; 135us; 137us; 138us; 140us; 141us; 1us; 65535us; 42us; 43us; 1us; 65535us; 45us; 46us; 1us; 65535us; 53us; 54us; 2us; 65535us; 45us; 51us; 54us; 57us; 12us; 65535us; 9us; 10us; 45us; 56us; 49us; 50us; 61us; 62us; 112us; 63us; 113us; 64us; 123us; 65us; 130us; 66us; 131us; 67us; 136us; 68us; 139us; 69us; 142us; 70us; 12us; 65535us; 10us; 71us; 50us; 71us; 56us; 71us; 62us; 71us; 63us; 71us; 64us; 71us; 65us; 71us; 66us; 71us; 67us; 71us; 68us; 71us; 69us; 71us; 70us; 71us; 12us; 65535us; 10us; 73us; 50us; 73us; 56us; 73us; 62us; 73us; 63us; 73us; 64us; 73us; 65us; 73us; 66us; 73us; 67us; 73us; 68us; 73us; 69us; 73us; 70us; 73us; 1us; 65535us; 115us; 116us; 1us; 65535us; 105us; 106us; 2us; 65535us; 99us; 100us; 110us; 111us; 1us; 65535us; 103us; 104us; 12us; 65535us; 10us; 74us; 50us; 74us; 56us; 74us; 62us; 74us; 63us; 74us; 64us; 74us; 65us; 74us; 66us; 74us; 67us; 74us; 68us; 74us; 69us; 74us; 70us; 74us; 1us; 65535us; 118us; 119us; 2us; 65535us; 118us; 125us; 126us; 127us; 12us; 65535us; 10us; 75us; 50us; 75us; 56us; 75us; 62us; 75us; 63us; 75us; 64us; 75us; 65us; 75us; 66us; 75us; 67us; 75us; 68us; 75us; 69us; 75us; 70us; 75us; 12us; 65535us; 10us; 76us; 50us; 76us; 56us; 76us; 62us; 76us; 63us; 76us; 64us; 76us; 65us; 76us; 66us; 76us; 67us; 76us; 68us; 76us; 69us; 76us; 70us; 76us; 12us; 65535us; 10us; 77us; 50us; 77us; 56us; 77us; 62us; 77us; 63us; 77us; 64us; 77us; 65us; 77us; 66us; 77us; 67us; 77us; 68us; 77us; 69us; 77us; 70us; 77us; 12us; 65535us; 10us; 78us; 50us; 78us; 56us; 78us; 62us; 78us; 63us; 78us; 64us; 78us; 65us; 78us; 66us; 78us; 67us; 78us; 68us; 78us; 69us; 78us; 70us; 78us; 13us; 65535us; 10us; 98us; 50us; 98us; 56us; 98us; 62us; 98us; 63us; 98us; 64us; 98us; 65us; 98us; 66us; 98us; 67us; 98us; 68us; 98us; 69us; 98us; 70us; 98us; 109us; 110us; 15us; 65535us; 10us; 144us; 50us; 144us; 56us; 144us; 62us; 144us; 63us; 144us; 64us; 144us; 65us; 144us; 66us; 144us; 67us; 144us; 68us; 144us; 69us; 144us; 70us; 144us; 92us; 93us; 109us; 144us; 151us; 152us; 2us; 65535us; 47us; 48us; 128us; 129us; 4us; 65535us; 47us; 153us; 48us; 155us; 128us; 153us; 129us; 155us; 1us; 65535us; 145us; 146us; 1us; 65535us; 145us; 159us; 2us; 65535us; 145us; 160us; 161us; 162us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 14us; 17us; 19us; 22us; 24us; 26us; 28us; 47us; 49us; 51us; 53us; 56us; 69us; 82us; 95us; 97us; 99us; 102us; 104us; 117us; 119us; 122us; 135us; 148us; 161us; 174us; 188us; 204us; 207us; 212us; 214us; 216us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 2us; 4us; 3us; 1us; 2us; 6us; 1us; 1us; 1us; 2us; 1us; 4us; 1us; 6us; 1us; 7us; 1us; 7us; 2us; 7us; 33us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 2us; 14us; 16us; 1us; 14us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 2us; 21us; 23us; 1us; 21us; 1us; 23us; 1us; 23us; 2us; 24us; 25us; 3us; 24us; 25us; 80us; 1us; 25us; 2us; 25us; 33us; 1us; 26us; 1us; 27us; 1us; 27us; 2us; 27us; 30us; 1us; 27us; 2us; 28us; 33us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 2us; 31us; 33us; 2us; 33us; 57us; 2us; 33us; 58us; 2us; 33us; 64us; 2us; 33us; 67us; 2us; 33us; 68us; 2us; 33us; 69us; 2us; 33us; 70us; 2us; 33us; 71us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 2us; 55us; 56us; 3us; 55us; 56us; 60us; 2us; 55us; 56us; 2us; 55us; 56us; 2us; 55us; 56us; 3us; 55us; 56us; 62us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 57us; 2us; 57us; 60us; 1us; 57us; 1us; 58us; 1us; 60us; 1us; 62us; 1us; 62us; 2us; 63us; 64us; 2us; 63us; 64us; 3us; 63us; 64us; 66us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 67us; 2us; 67us; 80us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 71us; 1us; 71us; 2us; 72us; 73us; 1us; 72us; 1us; 72us; 1us; 72us; 2us; 74us; 77us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 77us; 2us; 78us; 79us; 1us; 79us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; 2us; 84us; 86us; 1us; 85us; 1us; 86us; 1us; 86us; 2us; 87us; 89us; 1us; 88us; 1us; 89us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 27us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 96us; 98us; 100us; 102us; 105us; 109us; 111us; 114us; 116us; 118us; 120us; 123us; 125us; 128us; 130us; 132us; 134us; 136us; 138us; 141us; 144us; 147us; 150us; 153us; 156us; 159us; 162us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 224us; 228us; 231us; 234us; 237us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 256us; 258us; 260us; 262us; 264us; 266us; 269us; 272us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 315us; 317us; 319us; 321us; 323us; 325us; 328us; 330us; 332us; 334us; 337us; 339us; 341us; 343us; 345us; 348us; 350us; 352us; 354us; 356us; 358us; 361us; 363us; 365us; 367us; 370us; 372us; |]
let _fsyacc_action_rows = 166
let _fsyacc_actionTableElements = [|0us; 16387us; 0us; 49152us; 1us; 16389us; 24us; 11us; 3us; 32768us; 21us; 8us; 22us; 32us; 53us; 41us; 0us; 16385us; 0us; 16386us; 0us; 16388us; 0us; 16390us; 1us; 32768us; 25us; 9us; 0us; 16416us; 23us; 16391us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 3us; 32768us; 41us; 34us; 47us; 19us; 53us; 21us; 1us; 32768us; 23us; 13us; 1us; 32768us; 53us; 14us; 0us; 16392us; 2us; 32768us; 47us; 19us; 53us; 21us; 1us; 32768us; 23us; 17us; 1us; 32768us; 53us; 18us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 1us; 32768us; 29us; 22us; 1us; 32768us; 53us; 23us; 1us; 32768us; 29us; 24us; 1us; 32768us; 53us; 25us; 1us; 32768us; 32us; 26us; 1us; 32768us; 49us; 27us; 1us; 32768us; 29us; 28us; 1us; 32768us; 49us; 29us; 1us; 32768us; 29us; 30us; 1us; 32768us; 49us; 31us; 0us; 16396us; 1us; 32768us; 41us; 34us; 0us; 16397us; 0us; 16399us; 4us; 32768us; 42us; 36us; 50us; 40us; 52us; 39us; 53us; 38us; 0us; 16398us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16406us; 2us; 32768us; 34us; 45us; 42us; 44us; 0us; 16405us; 3us; 16416us; 16us; 58us; 17us; 47us; 19us; 52us; 0us; 16407us; 3us; 32768us; 47us; 158us; 48us; 157us; 49us; 156us; 4us; 16408us; 25us; 49us; 47us; 158us; 48us; 157us; 49us; 156us; 0us; 16416us; 23us; 16409us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 0us; 16410us; 1us; 32768us; 41us; 53us; 0us; 16413us; 2us; 32768us; 16us; 58us; 42us; 55us; 0us; 16411us; 23us; 16412us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 0us; 16414us; 1us; 32768us; 15us; 59us; 1us; 32768us; 53us; 60us; 1us; 32768us; 25us; 61us; 0us; 16416us; 23us; 16415us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 23us; 16441us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 23us; 16442us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 24us; 32768us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 42us; 124us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 23us; 16451us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 24us; 32768us; 0us; 131us; 1us; 136us; 2us; 139us; 3us; 132us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 24us; 32768us; 0us; 131us; 1us; 136us; 2us; 139us; 3us; 137us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 24us; 32768us; 0us; 131us; 1us; 136us; 2us; 139us; 3us; 140us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 24us; 32768us; 0us; 131us; 1us; 136us; 2us; 139us; 5us; 94us; 6us; 117us; 9us; 99us; 10us; 92us; 11us; 91us; 12us; 90us; 13us; 89us; 14us; 87us; 28us; 85us; 30us; 79us; 31us; 81us; 38us; 83us; 41us; 42us; 43us; 142us; 44us; 143us; 47us; 97us; 48us; 96us; 49us; 95us; 51us; 150us; 52us; 149us; 53us; 148us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 1us; 32768us; 53us; 80us; 0us; 16425us; 1us; 32768us; 53us; 82us; 0us; 16426us; 1us; 32768us; 53us; 84us; 0us; 16427us; 1us; 32768us; 53us; 86us; 0us; 16428us; 1us; 32768us; 41us; 42us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 3us; 32768us; 51us; 150us; 52us; 149us; 53us; 148us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16443us; 2us; 32768us; 41us; 42us; 53us; 114us; 1us; 32768us; 7us; 102us; 1us; 32768us; 41us; 103us; 0us; 16445us; 3us; 32768us; 27us; 105us; 34us; 115us; 42us; 108us; 1us; 32768us; 8us; 113us; 1us; 32768us; 42us; 107us; 0us; 16439us; 0us; 16440us; 3us; 32768us; 51us; 150us; 52us; 149us; 53us; 148us; 0us; 16443us; 2us; 32768us; 36us; 112us; 53us; 114us; 0us; 16416us; 0us; 16416us; 0us; 16444us; 1us; 32768us; 27us; 109us; 0us; 16446us; 1us; 32768us; 41us; 118us; 1us; 32768us; 27us; 128us; 3us; 32768us; 27us; 121us; 34us; 126us; 42us; 120us; 0us; 16447us; 1us; 32768us; 4us; 122us; 1us; 32768us; 36us; 123us; 0us; 16416us; 0us; 16448us; 0us; 16449us; 1us; 32768us; 27us; 128us; 0us; 16450us; 3us; 32768us; 47us; 158us; 48us; 157us; 49us; 156us; 4us; 32768us; 36us; 130us; 47us; 158us; 48us; 157us; 49us; 156us; 0us; 16416us; 0us; 16416us; 1us; 32768us; 41us; 42us; 1us; 32768us; 4us; 134us; 1us; 32768us; 41us; 42us; 0us; 16452us; 0us; 16416us; 1us; 32768us; 41us; 42us; 0us; 16453us; 0us; 16416us; 1us; 32768us; 41us; 42us; 0us; 16454us; 0us; 16416us; 0us; 16455us; 1us; 16457us; 45us; 145us; 2us; 32768us; 49us; 163us; 53us; 164us; 1us; 32768us; 46us; 147us; 0us; 16456us; 1us; 16458us; 33us; 151us; 0us; 16459us; 0us; 16460us; 3us; 32768us; 51us; 150us; 52us; 149us; 53us; 148us; 0us; 16461us; 1us; 16462us; 26us; 154us; 0us; 16463us; 0us; 16464us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 1us; 16468us; 30us; 161us; 0us; 16469us; 2us; 32768us; 49us; 163us; 53us; 164us; 0us; 16470us; 1us; 16471us; 53us; 165us; 0us; 16472us; 0us; 16473us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; 2us; 4us; 8us; 9us; 10us; 11us; 12us; 14us; 15us; 39us; 43us; 45us; 47us; 48us; 51us; 53us; 55us; 56us; 57us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 79us; 81us; 82us; 83us; 88us; 89us; 90us; 91us; 92us; 93us; 94us; 95us; 98us; 99us; 103us; 104us; 108us; 113us; 114us; 138us; 139us; 141us; 142us; 145us; 146us; 170us; 171us; 173us; 175us; 177us; 178us; 202us; 226us; 250us; 275us; 299us; 324us; 349us; 374us; 399us; 400us; 401us; 402us; 403us; 404us; 405us; 406us; 407us; 409us; 410us; 412us; 413us; 415us; 416us; 418us; 419us; 421us; 422us; 423us; 424us; 425us; 429us; 430us; 431us; 432us; 433us; 434us; 435us; 436us; 439us; 441us; 443us; 444us; 448us; 450us; 452us; 453us; 454us; 458us; 459us; 462us; 463us; 464us; 465us; 467us; 468us; 470us; 472us; 476us; 477us; 479us; 481us; 482us; 483us; 484us; 486us; 487us; 491us; 496us; 497us; 498us; 500us; 502us; 504us; 505us; 506us; 508us; 509us; 510us; 512us; 513us; 514us; 515us; 517us; 520us; 522us; 523us; 525us; 526us; 527us; 531us; 532us; 534us; 535us; 536us; 537us; 538us; 539us; 541us; 542us; 545us; 546us; 548us; 549us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 3us; 0us; 2us; 0us; 2us; 3us; 4us; 5us; 1us; 1us; 11us; 2us; 3us; 0us; 2us; 1us; 1us; 1us; 1us; 3us; 0us; 3us; 2us; 4us; 1us; 4us; 1us; 0us; 2us; 5us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 9us; 7us; 5us; 2us; 0us; 2us; 0us; 3us; 4us; 8us; 1us; 3us; 4us; 6us; 4us; 4us; 3us; 4us; 1us; 1us; 1us; 1us; 3us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 32us; 33us; 33us; 33us; 33us; 34us; 34us; 34us; 35us; 35us; 35us; 36us; 37us; 37us; 38us; 38us; 38us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 16386us; 16388us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 16398us; 16400us; 16401us; 16402us; 16403us; 16404us; 65535us; 65535us; 16405us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 16411us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 65535us; 16425us; 65535us; 16426us; 65535us; 16427us; 65535us; 16428us; 65535us; 16429us; 16430us; 16431us; 16432us; 65535us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16439us; 16440us; 65535us; 65535us; 65535us; 65535us; 65535us; 16444us; 65535us; 16446us; 65535us; 65535us; 65535us; 16447us; 65535us; 65535us; 65535us; 16448us; 16449us; 65535us; 16450us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16452us; 65535us; 65535us; 16453us; 65535us; 65535us; 16454us; 65535us; 16455us; 65535us; 65535us; 65535us; 16456us; 65535us; 16459us; 16460us; 65535us; 16461us; 65535us; 16463us; 16464us; 16465us; 16466us; 16467us; 65535us; 16469us; 65535us; 16470us; 65535us; 16472us; 16473us; |]
let _fsyacc_reductions ()  =    [| 
# 513 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Unit  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startunit));
# 522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_import_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_decl_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_main in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 ".\Parser.fsy"
                                                         UMain(_1, _2, _3) 
                   )
# 63 ".\Parser.fsy"
                 :  Unit ));
# 535 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_import_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_decl_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_export in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 ".\Parser.fsy"
                                                        UExport(_1, _2, _3) 
                   )
# 64 ".\Parser.fsy"
                 :  Unit ));
# 548 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 ".\Parser.fsy"
                                          [] 
                   )
# 66 ".\Parser.fsy"
                 : 'gentype_import_list));
# 558 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_import_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_import in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 ".\Parser.fsy"
                                                  _2 :: _1 
                   )
# 67 ".\Parser.fsy"
                 : 'gentype_import_list));
# 570 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 ".\Parser.fsy"
                                         [] 
                   )
# 69 ".\Parser.fsy"
                 : 'gentype_decl_list));
# 580 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decl_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_declaration in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 ".\Parser.fsy"
                                                   _2 :: _1 
                   )
# 70 ".\Parser.fsy"
                 : 'gentype_decl_list));
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 ".\Parser.fsy"
                                                      _3 
                   )
# 72 ".\Parser.fsy"
                 : 'gentype_main));
# 603 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_import_path in
            let _4 = parseState.GetInput(4) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 ".\Parser.fsy"
                                                                    { Explicit = []; Path = _2; Alias = _4 } 
                   )
# 74 ".\Parser.fsy"
                 : 'gentype_import));
# 615 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_brace_names in
            let _3 = parseState.GetInput(3) :?> 'gentype_import_path in
            let _5 = parseState.GetInput(5) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 ".\Parser.fsy"
                                                                          { Explicit = _2; Path = _3; Alias = _5 } 
                   )
# 75 ".\Parser.fsy"
                 : 'gentype_import));
# 628 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> StringLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 ".\Parser.fsy"
                                            IPLocal (_1) 
                   )
# 77 ".\Parser.fsy"
                 : 'gentype_import_path));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_remote in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 ".\Parser.fsy"
                                   IPRemote (_1) 
                   )
# 78 ".\Parser.fsy"
                 : 'gentype_import_path));
# 650 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            let _3 = parseState.GetInput(3) :?> Name in
            let _5 = parseState.GetInput(5) :?> Name in
            let _7 = parseState.GetInput(7) :?> IntegerLiteral in
            let _9 = parseState.GetInput(9) :?> IntegerLiteral in
            let _11 = parseState.GetInput(11) :?> IntegerLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 ".\Parser.fsy"
                          { Org = _1; Project = _3; Unit = _5; Major = _7; Minor = _9; Patch = _11 } 
                   )
# 81 ".\Parser.fsy"
                 : 'gentype_remote));
# 666 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_brace_names in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 ".\Parser.fsy"
                                                   _2 
                   )
# 83 ".\Parser.fsy"
                 : 'gentype_export));
# 677 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_name_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 ".\Parser.fsy"
                                                               _2 
                   )
# 85 ".\Parser.fsy"
                 : 'gentype_brace_names));
# 688 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 ".\Parser.fsy"
                                       [] 
                   )
# 87 ".\Parser.fsy"
                 : 'gentype_name_list));
# 698 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_name_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 ".\Parser.fsy"
                                            _2 :: _1 
                   )
# 88 ".\Parser.fsy"
                 : 'gentype_name_list));
# 710 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 ".\Parser.fsy"
                                          _1 
                   )
# 90 ".\Parser.fsy"
                 : 'gentype_name));
# 721 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 ".\Parser.fsy"
                                         _1 
                   )
# 91 ".\Parser.fsy"
                 : 'gentype_name));
# 732 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 ".\Parser.fsy"
                                          _1 
                   )
# 92 ".\Parser.fsy"
                 : 'gentype_name));
# 743 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 ".\Parser.fsy"
                                                DFunc (_1) 
                   )
# 96 ".\Parser.fsy"
                 : 'gentype_declaration));
# 754 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_term_statement_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 ".\Parser.fsy"
                                                                                  _2 
                   )
# 100 ".\Parser.fsy"
                 : 'gentype_term_statement_block));
# 765 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 ".\Parser.fsy"
                                                        [] 
                   )
# 102 ".\Parser.fsy"
                 : 'gentype_term_statement_list));
# 775 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term_statement_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_term_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 ".\Parser.fsy"
                                                                           _3 :: _1 
                   )
# 103 ".\Parser.fsy"
                 : 'gentype_term_statement_list));
# 787 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_pattern_expr_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 ".\Parser.fsy"
                                                                    SLet (_2, []) 
                   )
# 105 ".\Parser.fsy"
                 : 'gentype_term_statement));
# 798 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_pattern_expr_list in
            let _4 = parseState.GetInput(4) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 ".\Parser.fsy"
                                                                         SLet (_2, _4) 
                   )
# 106 ".\Parser.fsy"
                 : 'gentype_term_statement));
# 810 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_local_function in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 ".\Parser.fsy"
                                                      SLocals ([_1]) 
                   )
# 107 ".\Parser.fsy"
                 : 'gentype_term_statement));
# 821 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_local_function_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 ".\Parser.fsy"
                                                                             SLocals (_3) 
                   )
# 108 ".\Parser.fsy"
                 : 'gentype_term_statement));
# 832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 ".\Parser.fsy"
                                                   SExpression (_1) 
                   )
# 109 ".\Parser.fsy"
                 : 'gentype_term_statement));
# 843 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 ".\Parser.fsy"
                                                      [] 
                   )
# 111 ".\Parser.fsy"
                 : 'gentype_local_function_list));
# 853 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_local_function_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_local_function in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 ".\Parser.fsy"
                                                                 _2 :: _1 
                   )
# 112 ".\Parser.fsy"
                 : 'gentype_local_function_list));
# 865 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> Name in
            let _5 = parseState.GetInput(5) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 ".\Parser.fsy"
                                                                                     { Name = _3; Body = _5 } 
                   )
# 114 ".\Parser.fsy"
                 : 'gentype_local_function));
# 877 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 ".\Parser.fsy"
                                         [] 
                   )
# 116 ".\Parser.fsy"
                 : 'gentype_simple_expr));
# 887 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simple_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_word in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 ".\Parser.fsy"
                                             _2 :: _1 
                   )
# 117 ".\Parser.fsy"
                 : 'gentype_simple_expr));
# 899 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term_statement_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 ".\Parser.fsy"
                                                      EStatementBlock (_1) 
                   )
# 121 ".\Parser.fsy"
                 : 'gentype_word));
# 910 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_handle_word in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 ".\Parser.fsy"
                                            _1 
                   )
# 122 ".\Parser.fsy"
                 : 'gentype_word));
# 921 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_match_word in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 ".\Parser.fsy"
                                           _1 
                   )
# 123 ".\Parser.fsy"
                 : 'gentype_word));
# 932 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_if_word in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 ".\Parser.fsy"
                                         _1 
                   )
# 124 ".\Parser.fsy"
                 : 'gentype_word));
# 943 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_when_word in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 ".\Parser.fsy"
                                          _1 
                   )
# 125 ".\Parser.fsy"
                 : 'gentype_word));
# 954 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_while_word in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 ".\Parser.fsy"
                                           _1 
                   )
# 126 ".\Parser.fsy"
                 : 'gentype_word));
# 965 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_function_literal in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 ".\Parser.fsy"
                                                EFunctionLiteral (_1) 
                   )
# 128 ".\Parser.fsy"
                 : 'gentype_word));
# 976 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 ".\Parser.fsy"
                                               EExtension (_2) 
                   )
# 135 ".\Parser.fsy"
                 : 'gentype_word));
# 987 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 ".\Parser.fsy"
                                                ERestriction (_2) 
                   )
# 136 ".\Parser.fsy"
                 : 'gentype_word));
# 998 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 ".\Parser.fsy"
                                                 ESelect (_2) 
                   )
# 137 ".\Parser.fsy"
                 : 'gentype_word));
# 1009 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 ".\Parser.fsy"
                                                   EEmbedding (_2) 
                   )
# 140 ".\Parser.fsy"
                 : 'gentype_word));
# 1020 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_term_statement_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 ".\Parser.fsy"
                                                           EWithState (_2) 
                   )
# 142 ".\Parser.fsy"
                 : 'gentype_word));
# 1031 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 ".\Parser.fsy"
                                         ENewRef 
                   )
# 143 ".\Parser.fsy"
                 : 'gentype_word));
# 1041 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 ".\Parser.fsy"
                                         EGetRef 
                   )
# 144 ".\Parser.fsy"
                 : 'gentype_word));
# 1051 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 ".\Parser.fsy"
                                         EPutRef 
                   )
# 145 ".\Parser.fsy"
                 : 'gentype_word));
# 1061 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_qualified_name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 ".\Parser.fsy"
                                                   EUntag (_2) 
                   )
# 146 ".\Parser.fsy"
                 : 'gentype_word));
# 1072 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 ".\Parser.fsy"
                                     EDo 
                   )
# 147 ".\Parser.fsy"
                 : 'gentype_word));
# 1082 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> IntegerLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 ".\Parser.fsy"
                                         EInteger (_1) 
                   )
# 149 ".\Parser.fsy"
                 : 'gentype_word));
# 1093 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> DecimalLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 ".\Parser.fsy"
                                         EDecimal (_1) 
                   )
# 150 ".\Parser.fsy"
                 : 'gentype_word));
# 1104 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> StringLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 ".\Parser.fsy"
                                        EString (_1) 
                   )
# 151 ".\Parser.fsy"
                 : 'gentype_word));
# 1115 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Identifier  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 ".\Parser.fsy"
                                           EIdentifier (_1) 
                   )
# 152 ".\Parser.fsy"
                 : 'gentype_word));
# 1126 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_param_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_term_statement_block in
            let _6 = parseState.GetInput(6) :?> 'gentype_handler_list in
            let _8 = parseState.GetInput(8) :?> 'gentype_return in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 ".\Parser.fsy"
                                                                                                                         EHandle (_2, _3, _6, _8) 
                   )
# 154 ".\Parser.fsy"
                 : 'gentype_handle_word));
# 1140 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_param_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_term_statement_block in
            let _6 = parseState.GetInput(6) :?> 'gentype_handler_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 ".\Parser.fsy"
                                                                                                        EHandle (_2, _3, _6, []) 
                   )
# 155 ".\Parser.fsy"
                 : 'gentype_handle_word));
# 1153 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?>  Identifier  in
            let _3 = parseState.GetInput(3) :?> 'gentype_param_list in
            let _5 = parseState.GetInput(5) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 ".\Parser.fsy"
                                                                              { Name = _2; Params = _3; Body = _5; } 
                   )
# 157 ".\Parser.fsy"
                 : 'gentype_handler));
# 1166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 ".\Parser.fsy"
                                                  _2 
                   )
# 159 ".\Parser.fsy"
                 : 'gentype_return));
# 1177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 ".\Parser.fsy"
                                         [] 
                   )
# 161 ".\Parser.fsy"
                 : 'gentype_param_list));
# 1187 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_param_list in
            let _2 = parseState.GetInput(2) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 ".\Parser.fsy"
                                                    _2 :: _1 
                   )
# 162 ".\Parser.fsy"
                 : 'gentype_param_list));
# 1199 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 ".\Parser.fsy"
                                              [] 
                   )
# 164 ".\Parser.fsy"
                 : 'gentype_handler_list));
# 1209 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_handler_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_handler in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 ".\Parser.fsy"
                                                            _3 :: _1 
                   )
# 165 ".\Parser.fsy"
                 : 'gentype_handler_list));
# 1221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_match_clause_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 ".\Parser.fsy"
                                                                                   EMatch (_3, []) 
                   )
# 167 ".\Parser.fsy"
                 : 'gentype_match_word));
# 1232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_match_clause_list in
            let _7 = parseState.GetInput(7) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 ".\Parser.fsy"
                                                                                                  EMatch (_3, _7) 
                   )
# 168 ".\Parser.fsy"
                 : 'gentype_match_word));
# 1244 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_match_clause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 ".\Parser.fsy"
                                                               [_1] 
                   )
# 170 ".\Parser.fsy"
                 : 'gentype_match_clause_list));
# 1255 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_match_clause_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_match_clause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 ".\Parser.fsy"
                                                                        _3 :: _1 
                   )
# 171 ".\Parser.fsy"
                 : 'gentype_match_clause_list));
# 1267 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_pattern_expr_list in
            let _4 = parseState.GetInput(4) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 ".\Parser.fsy"
                                                                               { Matcher = _2; Body = _4 } 
                   )
# 173 ".\Parser.fsy"
                 : 'gentype_match_clause));
# 1279 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simple_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_term_statement_block in
            let _6 = parseState.GetInput(6) :?> 'gentype_term_statement_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 ".\Parser.fsy"
                                                                                                    EIf (_2, _4, _6) 
                   )
# 175 ".\Parser.fsy"
                 : 'gentype_if_word));
# 1292 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simple_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_term_statement_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 ".\Parser.fsy"
                                                                              EIf (_2, _4, []) 
                   )
# 177 ".\Parser.fsy"
                 : 'gentype_when_word));
# 1304 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simple_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_term_statement_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 ".\Parser.fsy"
                                                                                EWhile (_2, _4) 
                   )
# 179 ".\Parser.fsy"
                 : 'gentype_while_word));
# 1316 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simple_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 ".\Parser.fsy"
                                                                      _2 
                   )
# 181 ".\Parser.fsy"
                 : 'gentype_function_literal));
# 1327 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qualified_name in
            let _3 = parseState.GetInput(3) :?> 'gentype_fixed_size_term_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 ".\Parser.fsy"
                                                                                        { Qualifier = List.take (_1.Length - 1) _1; Name = List.last _1; Size = Some (_3) } 
                   )
# 183 ".\Parser.fsy"
                 :  Identifier ));
# 1339 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qualified_name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 ".\Parser.fsy"
                                                       { Qualifier = List.take (_1.Length - 1) _1; Name = List.last _1; Size = None } 
                   )
# 184 ".\Parser.fsy"
                 :  Identifier ));
# 1350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 ".\Parser.fsy"
                                                          [_1] 
                   )
# 186 ".\Parser.fsy"
                 : 'gentype_qualified_name));
# 1361 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 ".\Parser.fsy"
                                               [_1] 
                   )
# 187 ".\Parser.fsy"
                 : 'gentype_qualified_name));
# 1372 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 ".\Parser.fsy"
                                                   [_1] 
                   )
# 188 ".\Parser.fsy"
                 : 'gentype_qualified_name));
# 1383 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            let _3 = parseState.GetInput(3) :?> 'gentype_qualified_name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 ".\Parser.fsy"
                                                                      _1 :: _3 
                   )
# 189 ".\Parser.fsy"
                 : 'gentype_qualified_name));
# 1395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pattern_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 ".\Parser.fsy"
                                                            ind _1 SEnd 
                   )
# 193 ".\Parser.fsy"
                 : 'gentype_pattern_expr_list));
# 1406 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pattern_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 ".\Parser.fsy"
                                                       dot _1 SEnd 
                   )
# 194 ".\Parser.fsy"
                 : 'gentype_pattern_expr_list));
# 1417 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pattern_expr_list in
            let _2 = parseState.GetInput(2) :?> 'gentype_pattern_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 ".\Parser.fsy"
                                                              ind _2 _1 
                   )
# 195 ".\Parser.fsy"
                 : 'gentype_pattern_expr_list));
# 1429 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> IntegerLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 ".\Parser.fsy"
                                              PInteger (_1) 
                   )
# 197 ".\Parser.fsy"
                 : 'gentype_pattern_expr));
# 1440 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> DecimalLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 ".\Parser.fsy"
                                     PDecimal (_1) 
                   )
# 198 ".\Parser.fsy"
                 : 'gentype_pattern_expr));
# 1451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> StringLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 ".\Parser.fsy"
                                    PString (_1) 
                   )
# 199 ".\Parser.fsy"
                 : 'gentype_pattern_expr));
# 1462 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_size_term_factor_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 ".\Parser.fsy"
                                                                          _1 
                   )
# 203 ".\Parser.fsy"
                 : 'gentype_fixed_size_term_expr));
# 1473 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_size_term_factor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 ".\Parser.fsy"
                                                                                    [_1] 
                   )
# 205 ".\Parser.fsy"
                 : 'gentype_fixed_size_term_factor_list));
# 1484 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_size_term_factor_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_fixed_size_term_factor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 ".\Parser.fsy"
                                                                                        _3 :: _1 
                   )
# 206 ".\Parser.fsy"
                 : 'gentype_fixed_size_term_factor_list));
# 1496 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> IntegerLiteral in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 ".\Parser.fsy"
                                                          FixConst (_1) 
                   )
# 208 ".\Parser.fsy"
                 : 'gentype_fixed_size_term_factor));
# 1507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 ".\Parser.fsy"
                                              FixVar (_1) 
                   )
# 209 ".\Parser.fsy"
                 : 'gentype_fixed_size_term_factor));
# 1518 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> IntegerLiteral in
            let _2 = parseState.GetInput(2) :?> Name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 ".\Parser.fsy"
                                                    FixCoeff (_1, _2) 
                   )
# 210 ".\Parser.fsy"
                 : 'gentype_fixed_size_term_factor));
|]
# 1531 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 57;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let unit lexer lexbuf :  Unit  =
    engine lexer lexbuf 0 :?> _
